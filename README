Program 3: Sending Photos To A Concurrent Photo Server
======================================================

Authors:
Daniel Beckwith (djbeckwith)
Aditya Nivarthi (anivarthi)

Purpose:
* This program is used to demonstrate sending and receiving photos from a client to a server.
* The client can send photos separated in packets to the server, which saves them as new files.
* The connection protocols between client and server are simulated to demonstrate their function. The OSI Network Layer, Data Link Layer, and Physical Layer are implemented in the application as a simulation.
    * The Network Layer is responsible for converting chunks of the photos into packets to be sent.
    * The Data Link Layer is responsible for converting the packets into frames to be sent.
    * The Physical Layer is responsible for sending the frame data to the server, and receiving acknowledgement data.

Compile:
* Use make to compile, which will create team_3_photo_client and team_3_photo_server

Execution:
* For the client side, execution would look like:
    ./team_3_photo_client <hostname> <client id> <photo count>
* For the server side, execution would look like:
    ./team_3_photo_server

Output Files:
* server_<id>.log
    This file is the log for the server for the client id <id>.
* client_<id>.log
    This file is the log for the client with id <id>.
* photonew<id><photo num>.jpg
    This type of file is the new photo produced from the sent packets from the client. The client is defined by id <id> and <photo num> is the nth photo sent by that client.

Source Files:
* client_data_link_layer.c
* client_data_link_layer.h
* client_network_layer.c
* client_network_layer.h
* client_physical_layer_error.c
* data_link_layer.c
* data_link_layer.h
* makefile
* network_layer.h
* photo.h
* photo_client.c
* photo_server.c
* physical_layer.c
* physical_layer.h
* README
* server_data_link_layer.c
* server_data_link_layer.h
* server_network_layer.c
* server_network_layer.h
* server_physical_layer_error.c
* util.c
* util.h

Outside Sources:
* FNV Hash Algorithm for frame checksums (used general algorithm and offset basis and FNV prime values)
    http://www.isthe.com/chongo/tech/comp/fnv/
* Recv with Timeout Implementation Using Select for physical layer receive (used line-for-line implementation)
    http://developerweb.net/viewtopic.php?id=2933   (second code example from original post)

